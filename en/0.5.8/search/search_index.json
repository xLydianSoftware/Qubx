{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Qubx Documentation","text":""},{"location":"#installation","title":"Installation","text":"<pre><code>pip install Qubx\n</code></pre>"},{"location":"#usage","title":"Usage","text":"<p>Test usage example.</p>"},{"location":"about/","title":"Pomum res meritis cineres","text":""},{"location":"about/#eripui-domos-inter-siquidem-languor-propinquae-cera","title":"Eripui domos inter siquidem languor propinquae cera","text":"<p>Lorem markdownum freto securosque at paelex luminis squalere. Anni nova est longi est salire, capiti; quo magni tantis. Humo ad penetravit angues fida aras damnosa scalas mensae miserata: ad balatus in.</p>"},{"location":"about/#iacent-dat-dextrae-acies-vobis-o-cumque","title":"Iacent dat dextrae acies vobis o cumque","text":"<p>Natura neque ardescunt votique manuque orba alter, quid Aeneae. Leve magna virides arbitrium saepe caelestibus vincere se tibiaque positis. Et et intravit maledicere solebas attulit arbor.</p>"},{"location":"about/#visum-capillis-nataque-sic-bibendo-dixerat-atque","title":"Visum capillis nataque sic bibendo dixerat atque","text":"<p>Cum fugit et ubi quod sustinet ego locum, caesis, dei prima has, sua et, si! Altis mittunt ramos arma vos hic Cyllenius mente annua commenta, in Hymenaee.</p> <ol> <li>Paventis hanc umida truncos</li> <li>In suum</li> <li>Sub res</li> <li>Additus in silvis</li> </ol>"},{"location":"about/#quo-manus-et-domo-pectoraque-stirpi-suas","title":"Quo manus et domo pectoraque stirpi suas","text":"<p>Ambiguus hostis liquidas omnipotens probant comitum navis Tirynthius, lunae: essem. Lupo signant Tyndaris umquam criminibusque Pandione solis tibi nullumque est Hanc, eandem? Emeritis ultima, habenas Argiodus contra, cum ex fistula tamquam per.</p>"},{"location":"about/#nantemque-tamen-timetur-huius-pastoris-verborum-insilit","title":"Nantemque tamen timetur huius pastoris verborum insilit","text":"<p>Sit convertunt aut negare nondum Sallentinumque cladibus: nulla post. Fuga sororis nimiumque loqui ingrediens ille, Palatinis saetae. Ecce litus verbis, spargere, in margine fronde torvis. At oppressumque casus laboriferi: sensim usum modo forte: nec credis aliquis; in tibia iuvencum; possis. In quae et humo aegida ne campis fictus, euntis Troia motatque est.</p> <ul> <li>Saltem non</li> <li>Hospitis lutulenta illam</li> <li>Natura rubor</li> <li>Modo valle</li> <li>Tempora cruore dicturus stratis premit et iuvenes</li> </ul> <p>Spissisque cui citraque tibi paelice mihi aquae repetunt longeque et mihi, illa, nunc frenato madefactam iuvenem. Ponentem luctata Hymenaeon inhibere centum meritos. Lacerata cunctatus parari sinistrae, intravit aethera nimiique et rustice exuit cantus senectae viret invidiosa ibi carpebat sanguine. Ferisne dixere; protulit malorum potest. Super solvit, rudente, fieretque soceri.</p>"},{"location":"backtesting/management/","title":"Backtesting management (from Notebook)","text":""},{"location":"backtesting/management/#storing-restoring-simulation-results","title":"Storing / restoring simulation results","text":"<p>Result of strategy can be stored into the zip file and reloaded from it when needed.</p> <pre><code>r = simualte(...)\nr[0].to_file(\"/tmp/MyTest\") # -&gt; stores data into /tmp/MyTestxxxxxx.zip, xx - timestamp\n\n# now we can load it from file\nr0 = TradingSessionResult.from_file(\"/tmp/MyTest120250130165123.zip\")\n\n# also it's possible to attach some files to result stored to zip\nr[0].to_file(\"/tmp/MyTest\", attachments=[\"config.yaml\"]) # -&gt; also adds config.yaml to zip\n</code></pre> <p>Also it\u2019s possible to generate html report from result</p> <pre><code>r = simualte(...)\nr[0].to_html()\n</code></pre> <p>It\u2019s possible to use small backtests manager (BacktestsResultsManager)</p> <p><pre><code>brm = BacktestsResultsManager(\"/backtests/\")\nbrm.list() # list supports regexp filters \n</code></pre> </p> <p>Then it can load any result by it\u2019s index:</p> <p><code>brm[1]</code> or <code>brm[[2, 6, 7]]</code> etc.</p> <pre><code>tearsheet(brm[[2, 6, 7]])\ntearsheet(brm[1:3)\n</code></pre> <p>to delete: <code>brm.delete(1)</code></p> <p>It\u2019s possible to get table <pre><code>brm.list('.*', as_table=1)\n</code></pre> </p>"},{"location":"backtesting/scheduling/","title":"Scheduling","text":""},{"location":"backtesting/scheduling/#on_fit-schedule","title":"<code>on_fit()</code> schedule","text":"<p>Now it can use custom format</p> <p>\u201cM @ 23:59:55\u201d - first day of every month at 23:59:55</p> <p>\u201cQ @ 15:00\u201d - every quarter start at 15:00</p> <p>\u201c5D @ 10:00\u201d - every 5 days at 10:00</p> <p>\u201cMON @ 9:30\u201d - every Monday at 9:30 (TUE, WED, \u2026..)</p>"},{"location":"backtesting/scheduling/#set_universe","title":"<code>set_universe()</code>","text":"<p>Accepts additional parameter if_has_position_then  </p> <p>It describe what to do with assets requested to remove when they have open position.</p> <p>It can have 3 possible values:</p> <ul> <li>\u201cclose\u201d (default) - close position immediatelly and remove (unsubscribe) instrument from strategy</li> <li>\u201cwait_for_close\u201d - keep instrument and it\u2019s position until it\u2019s closed from strategy (or risk management), then remove instrument from strategy</li> <li>\u201cwait_for_change\u201d - keep instrument and position until strategy would try to change it - then close position and remove instrument</li> </ul>"},{"location":"backtesting/scheduling/#simulate","title":"<code>simulate()</code>","text":"<p>Start / stop can be also expressed in form: </p> <p><code>start=\"2023-06-01\", stop=\"+10d\"</code> - 10 days from start day</p> <p><code>start=\"2023-06-01\", stop=\"-5d\"</code>  - start 5 days before start day</p> <p>data parameter can be configurted to accept different data sources:</p> <pre><code>l1 = loader(....)\ncustom_reader = ....\nr = simulate({'CrossOver MA': TestB(...)}, \n    {                                     \n      'ohlc(1h)': l1,\n      'trade': l1,\n      'quote': l1,\n      '&lt;r&gt;MY_DATA&lt;/r&gt;': custom_reader\n    },\n   1000, ['BINANCE.UM:BTCUSDT'], \"vip0_usdt\", \"2023-07-10\", \"2023-07-11\", debug=\"DEBUG\",\n)\n</code></pre>"},{"location":"backtesting/simulations/","title":"Simulations","text":""},{"location":"backtesting/simulations/#running-simulations-experiments-from-yml-config","title":"Running simulations (experiments) from yml config","text":"<p>It\u2019s possible to make a yml file where we can describe simulation setup. Let\u2019s put config into test1.yml</p> <pre><code>strategy: test.model.Strategy1  # strategy class\n\ndescription: \n  - Description of this experiment\n  - May be multiline\n\nparameters:            # what startegy parameters to use in this run\n  timeframe: \"4h\"\n  parameter1: 123\n\ndata:                  # what data should be used for simulation\n  ohlc(4h): (use_as_aux_loader:=loader(\"BINANCE.UM\", \"4h\", source=\"mqdb::nebula\"))\n\nsimulation:\n  instruments: [\"BINANCE.UM:BTCUSDT\"]\n  capital: 100000.0\n  commissions: \"vip0_usdt\"\n  start: \"2021-01-01\"\n  stop: \"2025-01-21\"\n  aux_data: use_as_aux_loader  # here we could use loader defined in data section !\n  debug: ERROR\n</code></pre> <p>Now we can run it using qubx cli:</p> <pre><code>&gt; qubx simulate test1.yml -o /backtests/tests\n</code></pre> <p>Result will be stored into /backtests/tests folder.</p>"},{"location":"backtesting/simulations/#variations-hyperparameter-optimization","title":"Variations (hyperparameter optimization)","text":"<p>It\u2019s possible to run variations for some parameters (kind of optimization preparation). For that it\u2019s enough to add  variate section:</p> <pre><code>strategy: test.model.Strategy1  # strategy class\n\ndescription: \n  - Description of this experiment\n  - May be multiline\n\nparameters:            # what startegy parameters to use in this run\n  timeframe: \"4h\"\n  parameter1: 123\n  parameter1: 333\n\nvariate:\n  parameter1: [10, 20, 30, 40, 50, 50, 60, 70, 80, 90, 100]\n  parameter2: [10, 20, 30, 40, 50, 50, 60, 70, 80, 90, 100]\n  with:  # here we can apply constraints on parameters\n    parameter1, parameter2: parameter2 &gt; parameter1\n    parameter2: parameter2 &lt;= 90\n\ndata:                  # what data should be used for simulation\n  ohlc(4h): (use_as_aux_loader:=loader(\"BINANCE.UM\", \"4h\", source=\"mqdb::nebula\"))\n\nsimulation:\n  instruments: [\"BINANCE.UM:BTCUSDT\"]\n  capital: 100000.0\n  commissions: \"vip0_usdt\"\n  start: \"2021-01-01\"\n  stop: \"2025-01-21\"\n  debug: ERROR\n</code></pre> <p>Run this using same command</p> <pre><code>&gt; qubx simulate test1.yml -o /backtests/tests\n</code></pre>"}]}