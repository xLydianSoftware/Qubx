{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Qubx Documentation","text":""},{"location":"#installation","title":"Installation","text":"<pre><code>pip install Qubx\n</code></pre>"},{"location":"#usage","title":"Usage","text":"<p>Test usage example.</p>"},{"location":"about/","title":"Pomum res meritis cineres","text":""},{"location":"about/#eripui-domos-inter-siquidem-languor-propinquae-cera","title":"Eripui domos inter siquidem languor propinquae cera","text":"<p>Lorem markdownum freto securosque at paelex luminis squalere. Anni nova est longi est salire, capiti; quo magni tantis. Humo ad penetravit angues fida aras damnosa scalas mensae miserata: ad balatus in.</p>"},{"location":"about/#iacent-dat-dextrae-acies-vobis-o-cumque","title":"Iacent dat dextrae acies vobis o cumque","text":"<p>Natura neque ardescunt votique manuque orba alter, quid Aeneae. Leve magna virides arbitrium saepe caelestibus vincere se tibiaque positis. Et et intravit maledicere solebas attulit arbor.</p>"},{"location":"about/#visum-capillis-nataque-sic-bibendo-dixerat-atque","title":"Visum capillis nataque sic bibendo dixerat atque","text":"<p>Cum fugit et ubi quod sustinet ego locum, caesis, dei prima has, sua et, si! Altis mittunt ramos arma vos hic Cyllenius mente annua commenta, in Hymenaee.</p> <ol> <li>Paventis hanc umida truncos</li> <li>In suum</li> <li>Sub res</li> <li>Additus in silvis</li> </ol>"},{"location":"about/#quo-manus-et-domo-pectoraque-stirpi-suas","title":"Quo manus et domo pectoraque stirpi suas","text":"<p>Ambiguus hostis liquidas omnipotens probant comitum navis Tirynthius, lunae: essem. Lupo signant Tyndaris umquam criminibusque Pandione solis tibi nullumque est Hanc, eandem? Emeritis ultima, habenas Argiodus contra, cum ex fistula tamquam per.</p>"},{"location":"about/#nantemque-tamen-timetur-huius-pastoris-verborum-insilit","title":"Nantemque tamen timetur huius pastoris verborum insilit","text":"<p>Sit convertunt aut negare nondum Sallentinumque cladibus: nulla post. Fuga sororis nimiumque loqui ingrediens ille, Palatinis saetae. Ecce litus verbis, spargere, in margine fronde torvis. At oppressumque casus laboriferi: sensim usum modo forte: nec credis aliquis; in tibia iuvencum; possis. In quae et humo aegida ne campis fictus, euntis Troia motatque est.</p> <ul> <li>Saltem non</li> <li>Hospitis lutulenta illam</li> <li>Natura rubor</li> <li>Modo valle</li> <li>Tempora cruore dicturus stratis premit et iuvenes</li> </ul> <p>Spissisque cui citraque tibi paelice mihi aquae repetunt longeque et mihi, illa, nunc frenato madefactam iuvenem. Ponentem luctata Hymenaeon inhibere centum meritos. Lacerata cunctatus parari sinistrae, intravit aethera nimiique et rustice exuit cantus senectae viret invidiosa ibi carpebat sanguine. Ferisne dixere; protulit malorum potest. Super solvit, rudente, fieretque soceri.</p>"},{"location":"deployment/","title":"Strategy deployment","text":"In\u00a0[1]: Copied! <pre>import qubx\n\n%qubxd\n\nimport pandas as pd\nfrom qubx.utils import this_project_root, add_project_to_system_path\nfrom qubx.data.helpers import InMemoryCachedReader\nfrom qubx.backtester.simulator import simulate\nfrom qubx.data import loader\nfrom qubx.core.metrics import tearsheet, chart_signals\n</pre> import qubx  %qubxd  import pandas as pd from qubx.utils import this_project_root, add_project_to_system_path from qubx.data.helpers import InMemoryCachedReader from qubx.backtester.simulator import simulate from qubx.data import loader from qubx.core.metrics import tearsheet, chart_signals <pre>\n\u2800\u2800\u2870\u2856\u2812\u2812\u2892\u28a6\u2800\u2800   \n\u2800\u28a0\u2803\u2808\u2886\u28c0\u28ce\u28c0\u28f1\u2840  QUBX | Quantitative Backtesting Environment \n\u2800\u28b3\u2812\u2812\u285e\u281a\u2844\u2800\u2870\u2801         (c) 2025, ver. 0.5.8\n\u2800\u2800\u2831\u28dc\u28c0\u28c0\u28c8\u28e6\u2803\u2800\u2800\u2800 \n        \n</pre> <p>Adding folder with test strategies to python path to be able to call the imports.</p> In\u00a0[2]: Copied! <pre>PROJECT_ROOT = this_project_root()\nassert PROJECT_ROOT is not None\nadd_project_to_system_path(str(PROJECT_ROOT / \"tests/strategies\"))\n</pre> PROJECT_ROOT = this_project_root() assert PROJECT_ROOT is not None add_project_to_system_path(str(PROJECT_ROOT / \"tests/strategies\")) In\u00a0[3]: Copied! <pre>from macd_crossover.models.macd_crossover import MacdCrossoverStrategy\n\nld: InMemoryCachedReader = loader(  # type: ignore\n    \"BINANCE.UM\", \"1h\", source=f\"csv::{PROJECT_ROOT}/tests/data/csv_1h/\", n_jobs=1\n)\n\ntest0 = simulate(\n    strategies=(stg:=MacdCrossoverStrategy()),\n    data=ld,\n    capital=100_000,\n    instruments=[\"BINANCE.UM:BTCUSDT\"],\n    commissions=\"vip0_usdt\",\n    start=\"2023-06-01\",\n    stop=\"2023-06-10\",\n    debug=\"INFO\",\n)\n</pre> from macd_crossover.models.macd_crossover import MacdCrossoverStrategy  ld: InMemoryCachedReader = loader(  # type: ignore     \"BINANCE.UM\", \"1h\", source=f\"csv::{PROJECT_ROOT}/tests/data/csv_1h/\", n_jobs=1 )  test0 = simulate(     strategies=(stg:=MacdCrossoverStrategy()),     data=ld,     capital=100_000,     instruments=[\"BINANCE.UM:BTCUSDT\"],     commissions=\"vip0_usdt\",     start=\"2023-06-01\",     stop=\"2023-06-10\",     debug=\"INFO\", ) <pre>2023-06-01 00:00:00.000 [\u2139\ufe0f] SimulatedDataProvider.binance.um is initialized\n2023-06-01 00:00:00.000 [\u2139\ufe0f] SimulatedDataProvider ::: Simulation started at 2023-06-01 00:00:00 :::\n</pre> <pre>Simulating:   0%|          | 0/100 [00:00&lt;?, ?%/s]</pre> <pre>2023-06-02 15:00:00.000 [\u2139\ufe0f] SELL signal for BTCUSDT at 26952.0\n2023-06-02 19:00:00.000 [\u2139\ufe0f] BUY signal for BTCUSDT at 27183.2\n2023-06-03 03:00:00.000 [\u2139\ufe0f] SELL signal for BTCUSDT at 27138.5\n2023-06-03 16:00:00.000 [\u2139\ufe0f] BUY signal for BTCUSDT at 27292.7\n2023-06-03 18:00:00.000 [\u2139\ufe0f] SELL signal for BTCUSDT at 27147.6\n2023-06-04 08:00:00.000 [\u2139\ufe0f] BUY signal for BTCUSDT at 27141.0\n2023-06-05 00:00:00.000 [\u2139\ufe0f] SELL signal for BTCUSDT at 27102.4\n2023-06-06 04:00:00.000 [\u2139\ufe0f] BUY signal for BTCUSDT at 25719.8\n2023-06-07 07:00:00.000 [\u2139\ufe0f] SELL signal for BTCUSDT at 26819.5\n2023-06-08 08:00:00.000 [\u2139\ufe0f] BUY signal for BTCUSDT at 26431.5\n2023-06-09 01:00:00.000 [\u2139\ufe0f] SELL signal for BTCUSDT at 26445.8\n</pre> <pre>2023-06-09 09:00:00.000 [\u2139\ufe0f] BUY signal for BTCUSDT at 26632.5\n2023-06-09 16:00:00.000 [\u2139\ufe0f] SELL signal for BTCUSDT at 26465.1\n2023-06-10 00:59:55.000 [\u2139\ufe0f] SimulatedDataProvider ::: Simulation finished at 2023-06-10 00:00:00 :::\n</pre> In\u00a0[4]: Copied! <pre>tearsheet(test0, plot_leverage=True)\n</pre> tearsheet(test0, plot_leverage=True) Out[4]: Gain Cagr Sharpe Qr Max dd pct Mdd usd Sortino Calmar Tail ratio Stability Var Avg return Fees Execs 6093.911 7.664 4.268 1.58 3.136 3424.373 18.49 252.275 4.011 0.609 3756.992 0.628 1271.419 13.0 <p>First check if the strategy can be found by the <code>qubx</code> CLI.</p> In\u00a0[5]: Copied! <pre>! poetry run qubx ls ../tests/strategies/macd_crossover\n</pre> ! poetry run qubx ls ../tests/strategies/macd_crossover <pre> - /home/yuriy/devs/Qubx/tests/strategies/macd_crossover/models/macd_crossover.py -\n\t.--( MacdCrossoverStrategy : MACD Crossover Strategy. \n\t:  signal_period  : 9\n\t:  slow_period    : 26\n\t:  fast_period    : 12\n\t:  leverage       : 1.0\n\t:  timeframe      : 1h\n\n\n</pre> <p>We can package the strategy and all of its dependencies via <code>qubx release</code>. You can check the available options like this:</p> In\u00a0[6]: Copied! <pre>! poetry run qubx release --help\n</pre> ! poetry run qubx release --help <pre>Usage: qubx release [OPTIONS] [DIRECTORY]\n\n  Releases the strategy to a zip file.\n\n  The strategy can be specified in two ways: 1. As a strategy name (class\n  name) - strategies are scanned in the given directory 2. As a path to a\n  config YAML file containing the strategy configuration in StrategyConfig\n  format\n\n  If a strategy name is provided, a default configuration will be generated\n  with: - The strategy parameters from the strategy class - Default exchange,\n  connector, and instruments from the command options - Standard logging\n  configuration\n\n  If a config file is provided, it must follow the StrategyConfig structure\n  with: - strategy: The strategy name or path - parameters: Dictionary of\n  strategy parameters - exchanges: Dictionary of exchange configurations -\n  aux: Auxiliary configuration - logging: Logging configuration\n\n  All of the dependencies are included in the zip file.\n\nOptions:\n  -s, --strategy TEXT         Strategy name to release (should match the\n                              strategy class name) or path to a config YAML\n                              file  [required]\n  -o, --output-dir TEXT       Output directory to put zip file.  [default:\n                              releases]\n  -t, --tag TEXT              Additional tag for this release (e.g. 'v1.0.0')\n  -m, --message TEXT          Release message (added to the info yaml file).\n  -c, --commit                Commit changes and create tag in repo (default:\n                              False)\n  --default-exchange TEXT     Default exchange to use in the generated config.\n                              [default: BINANCE.UM]\n  --default-connector TEXT    Default connector to use in the generated\n                              config.  [default: ccxt]\n  --default-instruments TEXT  Default instruments to use in the generated\n                              config (comma-separated).  [default: BTCUSDT]\n  --help                      Show this message and exit.\n</pre> In\u00a0[11]: Copied! <pre>! poetry run qubx release \\\n    -s MacdCrossoverStrategy \\\n    -o ../releases \\\n    -m \"Test release\" \\\n    ../tests/strategies/macd_crossover\n</pre> ! poetry run qubx release \\     -s MacdCrossoverStrategy \\     -o ../releases \\     -m \"Test release\" \\     ../tests/strategies/macd_crossover <pre>2025-02-26 14:27:25.461 [ \u2139\ufe0f ] (release) Finding strategy by name: MacdCrossoverStrategy\n2025-02-26 14:27:25.479 [ \u2139\ufe0f ] (release)  - Modified files -\n2025-02-26 14:27:25.488 [ \u26a0\ufe0f ] (release) qubx.cli.release:process_git_repo:687 -  &gt;&gt; Creating git tag is skipped due to --skip-tag option\n2025-02-26 14:27:25.488 [ \u2139\ufe0f ] (release) Creating release pack for R_MacdCrossoverStrategy_20250226142725 ...\n2025-02-26 14:27:26.303 [ \u2139\ufe0f ] (release) Generating poetry.lock file without creating virtual environment...\n2025-02-26 14:27:31.766 [ \u2139\ufe0f ] (release) Created release pack: ../releases/R_MacdCrossoverStrategy_20250226142725.zip\n</pre> In\u00a0[2]: Copied! <pre>! poetry run qubx deploy --force ../releases/R_MacdCrossoverStrategy_20250226142725.zip\n</pre> ! poetry run qubx deploy --force ../releases/R_MacdCrossoverStrategy_20250226142725.zip <pre>2025-02-26 14:32:16.284 [ \u26a0\ufe0f ] (deploy) qubx.cli.deploy:prepare_output_directory:66 - Removing existing directory /home/yuriy/devs/Qubx/releases/R_MacdCrossoverStrategy_20250226142725\n2025-02-26 14:32:17.290 [ \u2139\ufe0f ] (deploy) Unpacking /home/yuriy/devs/Qubx/releases/R_MacdCrossoverStrategy_20250226142725.zip to /home/yuriy/devs/Qubx/releases/R_MacdCrossoverStrategy_20250226142725\n2025-02-26 14:32:17.294 [ \u2139\ufe0f ] (deploy) Creating Poetry virtual environment\n2025-02-26 14:32:17.295 [ \u2139\ufe0f ] (deploy) Installing dependencies\n2025-02-26 14:32:33.052 [ \u2139\ufe0f ] (deploy) Strategy deployed successfully to /home/yuriy/devs/Qubx/releases/R_MacdCrossoverStrategy_20250226142725\n2025-02-26 14:32:33.052 [ \u2139\ufe0f ] (deploy) To run the strategy (paper mode): cd /home/yuriy/devs/Qubx/releases/R_MacdCrossoverStrategy_20250226142725 &amp;&amp; poetry run qubx run config.yml --paper\n</pre> In\u00a0[4]: Copied! <pre>! cd ../releases/R_MacdCrossoverStrategy_20250226142725 &amp;&amp; poetry run qubx run config.yml --paper\n</pre> ! cd ../releases/R_MacdCrossoverStrategy_20250226142725 &amp;&amp; poetry run qubx run config.yml --paper <pre>\n\u2800\u2800\u2870\u2856\u2812\u2812\u2892\u28a6\u2800\u2800   \n\u2800\u28a0\u2803\u2808\u2886\u28c0\u28ce\u28c0\u28f1\u2840  QUBX | Quantitative Backtesting Environment \n\u2800\u28b3\u2812\u2812\u285e\u281a\u2844\u2800\u2870\u2801         (c) 2025, ver. 0.5.8\n\u2800\u2800\u2831\u28dc\u28c0\u28c0\u28c8\u28e6\u2803\u2800\u2800\u2800 \n        \n^C\n</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre>"},{"location":"deployment/#strategy-deployment","title":"Strategy deployment\u00b6","text":"<p>The strategy deployment cycle is explained based on an example of a simple macd crossover strategy located at <code>tests/strategies/macd_crossover</code>.</p>"},{"location":"deployment/#1-simulation","title":"1. Simulation\u00b6","text":"<p>First let's make sure that the simulation works as expected.</p>"},{"location":"deployment/#2-release","title":"2. Release\u00b6","text":""},{"location":"backtesting/management/","title":"Backtesting management (from Notebook)","text":""},{"location":"backtesting/management/#storing-restoring-simulation-results","title":"Storing / restoring simulation results","text":"<p>Result of strategy can be stored into the zip file and reloaded from it when needed.</p> <pre><code>r = simualte(...)\nr[0].to_file(\"/tmp/MyTest\") # -&gt; stores data into /tmp/MyTestxxxxxx.zip, xx - timestamp\n\n# now we can load it from file\nr0 = TradingSessionResult.from_file(\"/tmp/MyTest120250130165123.zip\")\n\n# also it's possible to attach some files to result stored to zip\nr[0].to_file(\"/tmp/MyTest\", attachments=[\"config.yaml\"]) # -&gt; also adds config.yaml to zip\n</code></pre> <p>Also it\u2019s possible to generate html report from result</p> <pre><code>r = simualte(...)\nr[0].to_html()\n</code></pre> <p>It\u2019s possible to use small backtests manager (BacktestsResultsManager)</p> <p><pre><code>brm = BacktestsResultsManager(\"/backtests/\")\nbrm.list() # list supports regexp filters \n</code></pre> </p> <p>Then it can load any result by it\u2019s index:</p> <p><code>brm[1]</code> or <code>brm[[2, 6, 7]]</code> etc.</p> <pre><code>tearsheet(brm[[2, 6, 7]])\ntearsheet(brm[1:3)\n</code></pre> <p>to delete: <code>brm.delete(1)</code></p> <p>It\u2019s possible to get table <pre><code>brm.list('.*', as_table=1)\n</code></pre> </p>"},{"location":"backtesting/scheduling/","title":"Scheduling","text":""},{"location":"backtesting/scheduling/#on_fit-schedule","title":"<code>on_fit()</code> schedule","text":"<p>Now it can use custom format</p> <p>\u201cM @ 23:59:55\u201d - first day of every month at 23:59:55</p> <p>\u201cQ @ 15:00\u201d - every quarter start at 15:00</p> <p>\u201c5D @ 10:00\u201d - every 5 days at 10:00</p> <p>\u201cMON @ 9:30\u201d - every Monday at 9:30 (TUE, WED, \u2026..)</p>"},{"location":"backtesting/scheduling/#set_universe","title":"<code>set_universe()</code>","text":"<p>Accepts additional parameter if_has_position_then  </p> <p>It describe what to do with assets requested to remove when they have open position.</p> <p>It can have 3 possible values:</p> <ul> <li>\u201cclose\u201d (default) - close position immediatelly and remove (unsubscribe) instrument from strategy</li> <li>\u201cwait_for_close\u201d - keep instrument and it\u2019s position until it\u2019s closed from strategy (or risk management), then remove instrument from strategy</li> <li>\u201cwait_for_change\u201d - keep instrument and position until strategy would try to change it - then close position and remove instrument</li> </ul>"},{"location":"backtesting/scheduling/#simulate","title":"<code>simulate()</code>","text":"<p>Start / stop can be also expressed in form: </p> <p><code>start=\"2023-06-01\", stop=\"+10d\"</code> - 10 days from start day</p> <p><code>start=\"2023-06-01\", stop=\"-5d\"</code>  - start 5 days before start day</p> <p>data parameter can be configurted to accept different data sources:</p> <pre><code>l1 = loader(....)\ncustom_reader = ....\nr = simulate({'CrossOver MA': TestB(...)}, \n    {                                     \n      'ohlc(1h)': l1,\n      'trade': l1,\n      'quote': l1,\n      '&lt;r&gt;MY_DATA&lt;/r&gt;': custom_reader\n    },\n   1000, ['BINANCE.UM:BTCUSDT'], \"vip0_usdt\", \"2023-07-10\", \"2023-07-11\", debug=\"DEBUG\",\n)\n</code></pre>"},{"location":"backtesting/simulations/","title":"Simulations","text":""},{"location":"backtesting/simulations/#running-simulations-experiments-from-yml-config","title":"Running simulations (experiments) from yml config","text":"<p>It\u2019s possible to make a yml file where we can describe simulation setup. Let\u2019s put config into test1.yml</p> <pre><code>strategy: test.model.Strategy1  # strategy class\n\ndescription: \n  - Description of this experiment\n  - May be multiline\n\nparameters:            # what startegy parameters to use in this run\n  timeframe: \"4h\"\n  parameter1: 123\n\ndata:                  # what data should be used for simulation\n  ohlc(4h): (use_as_aux_loader:=loader(\"BINANCE.UM\", \"4h\", source=\"mqdb::nebula\"))\n\nsimulation:\n  instruments: [\"BINANCE.UM:BTCUSDT\"]\n  capital: 100000.0\n  commissions: \"vip0_usdt\"\n  start: \"2021-01-01\"\n  stop: \"2025-01-21\"\n  aux_data: use_as_aux_loader  # here we could use loader defined in data section !\n  debug: ERROR\n</code></pre> <p>Now we can run it using qubx cli:</p> <pre><code>&gt; qubx simulate test1.yml -o /backtests/tests\n</code></pre> <p>Result will be stored into /backtests/tests folder.</p>"},{"location":"backtesting/simulations/#variations-hyperparameter-optimization","title":"Variations (hyperparameter optimization)","text":"<p>It\u2019s possible to run variations for some parameters (kind of optimization preparation). For that it\u2019s enough to add  variate section:</p> <pre><code>strategy: test.model.Strategy1  # strategy class\n\ndescription: \n  - Description of this experiment\n  - May be multiline\n\nparameters:            # what startegy parameters to use in this run\n  timeframe: \"4h\"\n  parameter1: 123\n  parameter1: 333\n\nvariate:\n  parameter1: [10, 20, 30, 40, 50, 50, 60, 70, 80, 90, 100]\n  parameter2: [10, 20, 30, 40, 50, 50, 60, 70, 80, 90, 100]\n  with:  # here we can apply constraints on parameters\n    parameter1, parameter2: parameter2 &gt; parameter1\n    parameter2: parameter2 &lt;= 90\n\ndata:                  # what data should be used for simulation\n  ohlc(4h): (use_as_aux_loader:=loader(\"BINANCE.UM\", \"4h\", source=\"mqdb::nebula\"))\n\nsimulation:\n  instruments: [\"BINANCE.UM:BTCUSDT\"]\n  capital: 100000.0\n  commissions: \"vip0_usdt\"\n  start: \"2021-01-01\"\n  stop: \"2025-01-21\"\n  debug: ERROR\n</code></pre> <p>Run this using same command</p> <pre><code>&gt; qubx simulate test1.yml -o /backtests/tests\n</code></pre>"}]}